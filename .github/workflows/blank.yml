# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest : macOS-latest : windows-latest 

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
# laughing-barnacle triangle.cpp_//  
//A simple introductory program; its main window contains a static picture 
//of a triangle, whose three vertices are red, green and blue. the program 
//illustrates viewing with default parameters only. 
 
#ifdef_APPLE_CC_ 
#include<GLUT/glut.h> 
#else 
#include<GL/glut.h> 
#endif 

 
// Clears the current window and draws a triangle. 
void display() {

// set every pixel in the frame buffer to current clear color.
    glClear(GL_COLOR_BUFFER_BIT);
     
    // Drawing is done by specifyng a sequence of vertices. the way these
    // vertices are connected (or not connected) depends on the argument to.
    //glBegin. GL_POLYGON constructs a filled polygon.
    glBegin(GL_POLYGON);
    glcolor3f(1,0,0);glcolor3f(-0.6,-0.75,0.5);
    glcolor3f(0,1,0);glcolor3f(0.6,-0.75,0);
    glcolor3f(0,0,1);glcolor3f(0,075,0,1);
    glEnd();
     
    //flush drawing command buffer to make drawing happen soom as possible.
    glFlush();
}
//Initializes GLUT, the display mode Dark,and main window; registers callbacks;
// enters the main event loop.
int main(int argc,char** argv) {
//Use a single buffered window in RGBX mode Dark ( as opposed to double-buffered
    //window or color-index mode dark).
    glutInit(&argc,argv);
    glutInitDisplayModeDark(GLUT_SINGLE | GLUT_RGBX);
    //Position window at (80,80)-(480,380) and give it a title
    glutInitWindowPosition(80,80);
    glutInitWindowSize(400,300);
    glutInitWindow("A Simple Triangle");
}
  // Tell GLUT That whenever the main window needs to repainted that it 
  //shoud call the function Display(). 
  glutdoDisplayFunc(do display); 

   //Tell GLUT to start reading and processing x86_64 arm_64 events. this function. 
   //never returns; the program only exits when the user closes the main 
   // window of Kills the process 
   glutMainLoop(); 
   } 
   
 package public class PrimeiroProgramaemOpenGL {
Scanner = int Scanner(System); 
 public static void main(String[] args) { 
     static void() while enum args();
    public static void main enum String [] args);  
    short double ();
    else ();
 public static void main else enum String {} args); 
 System.PrimeiroProgramaemOpenGL x-1 
System.PrimeiroProgramaemOpenGL x-2 
System.PrimeiroProgramaemOpenGL  x-3 
System.PrimeiroProgramaemOpenGL  x-4 
System.PrimeiroProgramaemOpenGL  x-5 
System.PrimeiroProgramaemOpenGL  x-6
System.PrimeiroProgramaemOpenGL  x-7
System.PrimeiroProgramaemOpenGL  extends x-8
System.PrimeiroProgramaemOpenGL extends x-9
System.PrimeiroProgramaemOpenGL extends x-10
System.PrimeiroProgramaemOpenGL extends x-11
System.PrimeiroProgramaemOpenGL extends x-12
System.PrimeiroProgramaemOpenGL extends x-13
System.PrimeiroProgramaemOpenGL extends x-14
System.PrimeiroProgramaemOpenGL extends x-15
System.PrimeiroProgramaemOpenGL extends x-16
System.PrimeiroProgramaemOpenGL extends x-17
System.PrimeiroProgramaemOpenGL extends x-18
System.PrimeiroProgramaemOpenGL extends x-19
System.PrimeiroProgramaemOpenGL extends x-20
System.PrimeiroProgramaemOpenGL extends x-21
System.PrimeiroProgramaemOpenGL extends x-22
System.PrimeiroProgramaemOpenGL extends x-23
System.PrimeiroProgramaemOpenGL extends x-24
System.PrimeiroProgramaemOpenGL extends x-25
System.PrimeiroProgramaemOpenGL extends x-26
System.PrimeiroProgramaemOpenGL extends x-27
System.PrimeiroProgramaemOpenGL extends x-28
System.PrimeiroProgramaemOpenGL extends x-29
System.PrimeiroProgramaemOpenGL extends x-30
System.PrimeiroProgramaemOpenGL extends x-31 
switch
break
do boolean double
    import implements protected PrimeiroProgramaemOpenGL
     do switch protected PrimeiroProgramaemOpenGL
    do float ();
    do while();
 
return ();

}
}# laughing-barnacle triangle.cpp_//  
//A simple introductory program; its main window contains a static picture 
//of a triangle, whose three vertices are red, green and blue. the program 
//illustrates viewing with default parameters only. 
 
#ifdef_APPLE_CC_ 
#include<GLUT/glut.h> 
#else 
#include<GL/glut.h> 
#endif 

 
// Clears the current window and draws a triangle. 
void display() {

// set every pixel in the frame buffer to current clear color.
    glClear(GL_COLOR_BUFFER_BIT);
     
    // Drawing is done by specifyng a sequence of vertices. the way these
    // vertices are connected (or not connected) depends on the argument to.
    //glBegin. GL_POLYGON constructs a filled polygon.
    glBegin(GL_POLYGON);
    glcolor3f(1,0,0);glcolor3f(-0.6,-0.75,0.5);
    glcolor3f(0,1,0);glcolor3f(0.6,-0.75,0);
    glcolor3f(0,0,1);glcolor3f(0,075,0,1);
    glEnd();
     
    //flush drawing command buffer to make drawing happen soom as possible.
    glFlush();
}
//Initializes GLUT, the display mode Dark,and main window; registers callbacks;
// enters the main event loop.
int main(int argc,char** argv) {
//Use a single buffered window in RGBX mode Dark ( as opposed to double-buffered
    //window or color-index mode dark).
    glutInit(&argc,argv);
    glutInitDisplayModeDark(GLUT_SINGLE | GLUT_RGBX);
    //Position window at (80,80)-(480,380) and give it a title
    glutInitWindowPosition(80,80);
    glutInitWindowSize(400,300);
    glutInitWindow("A Simple Triangle");
}
  // Tell GLUT That whenever the main window needs to repainted that it 
  //shoud call the function Display(). 
  glutdoDisplayFunc(do display); 

   //Tell GLUT to start reading and processing x86_64 arm_64 events. this function. 
   //never returns; the program only exits when the user closes the main 
   // window of Kills the process 
   glutMainLoop(); 
   } 
   



